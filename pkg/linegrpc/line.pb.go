// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/linegrpc/line.proto

package linegrpc

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Rec struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Val                  float64  `protobuf:"fixed64,2,opt,name=val,proto3" json:"val,omitempty"`
	Time                 uint32   `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rec) Reset()         { *m = Rec{} }
func (m *Rec) String() string { return proto.CompactTextString(m) }
func (*Rec) ProtoMessage()    {}
func (*Rec) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac342487d72e2faa, []int{0}
}
func (m *Rec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rec.Merge(m, src)
}
func (m *Rec) XXX_Size() int {
	return m.Size()
}
func (m *Rec) XXX_DiscardUnknown() {
	xxx_messageInfo_Rec.DiscardUnknown(m)
}

var xxx_messageInfo_Rec proto.InternalMessageInfo

func (m *Rec) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Rec) GetVal() float64 {
	if m != nil {
		return m.Val
	}
	return 0
}

func (m *Rec) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

type Summary struct {
	ReceivedCount        uint32   `protobuf:"varint,1,opt,name=receivedCount,proto3" json:"receivedCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Summary) Reset()         { *m = Summary{} }
func (m *Summary) String() string { return proto.CompactTextString(m) }
func (*Summary) ProtoMessage()    {}
func (*Summary) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac342487d72e2faa, []int{1}
}
func (m *Summary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Summary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Summary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Summary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Summary.Merge(m, src)
}
func (m *Summary) XXX_Size() int {
	return m.Size()
}
func (m *Summary) XXX_DiscardUnknown() {
	xxx_messageInfo_Summary.DiscardUnknown(m)
}

var xxx_messageInfo_Summary proto.InternalMessageInfo

func (m *Summary) GetReceivedCount() uint32 {
	if m != nil {
		return m.ReceivedCount
	}
	return 0
}

func init() {
	proto.RegisterType((*Rec)(nil), "Rec")
	proto.RegisterType((*Summary)(nil), "Summary")
}

func init() { proto.RegisterFile("pkg/linegrpc/line.proto", fileDescriptor_ac342487d72e2faa) }

var fileDescriptor_ac342487d72e2faa = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0xc8, 0x4e, 0xd7,
	0xcf, 0xc9, 0xcc, 0x4b, 0x4d, 0x2f, 0x2a, 0x48, 0x06, 0x33, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2,
	0x95, 0xec, 0xb9, 0x98, 0x83, 0x52, 0x93, 0x85, 0x84, 0xb8, 0x58, 0x0a, 0x12, 0x4b, 0x32, 0x24,
	0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x21, 0x01, 0x2e, 0xe6, 0xb2, 0xc4, 0x1c, 0x09,
	0x26, 0x05, 0x46, 0x0d, 0xc6, 0x20, 0x10, 0x13, 0xa4, 0xaa, 0x24, 0x33, 0x37, 0x55, 0x82, 0x59,
	0x81, 0x51, 0x83, 0x37, 0x08, 0xcc, 0x56, 0xd2, 0xe7, 0x62, 0x0f, 0x2e, 0xcd, 0xcd, 0x4d, 0x2c,
	0xaa, 0x14, 0x52, 0xe1, 0xe2, 0x2d, 0x4a, 0x4d, 0x4e, 0xcd, 0x2c, 0x4b, 0x4d, 0x71, 0xce, 0x2f,
	0xcd, 0x2b, 0x01, 0x9b, 0xc6, 0x1b, 0x84, 0x2a, 0x68, 0xa4, 0xc4, 0xc5, 0xe2, 0x9b, 0x98, 0x99,
	0x27, 0x24, 0xc5, 0xc5, 0x12, 0x9c, 0x9a, 0x97, 0x22, 0xc4, 0xa2, 0x17, 0x94, 0x9a, 0x2c, 0xc5,
	0xa1, 0x07, 0x35, 0x45, 0x89, 0x41, 0x83, 0xd1, 0x49, 0xea, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f,
	0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf1, 0x58, 0x8e, 0x21, 0x8a, 0x03, 0xe6, 0xf8, 0x24,
	0x36, 0xb0, 0xc3, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc8, 0xd9, 0xf6, 0x3d, 0xd3, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MainClient is the client API for Main service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MainClient interface {
	Send(ctx context.Context, opts ...grpc.CallOption) (Main_SendClient, error)
}

type mainClient struct {
	cc *grpc.ClientConn
}

func NewMainClient(cc *grpc.ClientConn) MainClient {
	return &mainClient{cc}
}

func (c *mainClient) Send(ctx context.Context, opts ...grpc.CallOption) (Main_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Main_serviceDesc.Streams[0], "/Main/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &mainSendClient{stream}
	return x, nil
}

type Main_SendClient interface {
	Send(*Rec) error
	CloseAndRecv() (*Summary, error)
	grpc.ClientStream
}

type mainSendClient struct {
	grpc.ClientStream
}

func (x *mainSendClient) Send(m *Rec) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mainSendClient) CloseAndRecv() (*Summary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Summary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MainServer is the server API for Main service.
type MainServer interface {
	Send(Main_SendServer) error
}

// UnimplementedMainServer can be embedded to have forward compatible implementations.
type UnimplementedMainServer struct {
}

func (*UnimplementedMainServer) Send(srv Main_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}

func RegisterMainServer(s *grpc.Server, srv MainServer) {
	s.RegisterService(&_Main_serviceDesc, srv)
}

func _Main_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MainServer).Send(&mainSendServer{stream})
}

type Main_SendServer interface {
	SendAndClose(*Summary) error
	Recv() (*Rec, error)
	grpc.ServerStream
}

type mainSendServer struct {
	grpc.ServerStream
}

func (x *mainSendServer) SendAndClose(m *Summary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mainSendServer) Recv() (*Rec, error) {
	m := new(Rec)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Main_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Main",
	HandlerType: (*MainServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _Main_Send_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/linegrpc/line.proto",
}

func (m *Rec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Time != 0 {
		i = encodeVarintLine(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x18
	}
	if m.Val != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Val))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintLine(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Summary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Summary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Summary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReceivedCount != 0 {
		i = encodeVarintLine(dAtA, i, uint64(m.ReceivedCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLine(dAtA []byte, offset int, v uint64) int {
	offset -= sovLine(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Rec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovLine(uint64(l))
	}
	if m.Val != 0 {
		n += 9
	}
	if m.Time != 0 {
		n += 1 + sovLine(uint64(m.Time))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Summary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReceivedCount != 0 {
		n += 1 + sovLine(uint64(m.ReceivedCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLine(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLine(x uint64) (n int) {
	return sovLine(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Rec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Val = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Summary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Summary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Summary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedCount", wireType)
			}
			m.ReceivedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceivedCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLine(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLine
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLine
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLine
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLine
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLine        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLine          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLine = fmt.Errorf("proto: unexpected end of group")
)
