// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/grpcstreamer/streamer.proto

package grpcstreamer

import (
	context "context"
	fmt "fmt"
	v1 "github.com/bookingcom/nanotube/pkg/opentelemetry/proto/metrics/v1"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Result struct {
	ReceivedCount        uint32   `protobuf:"varint,1,opt,name=receivedCount,proto3" json:"receivedCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_649f0c502c082470, []int{0}
}
func (m *Result) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Result.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return m.Size()
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetReceivedCount() uint32 {
	if m != nil {
		return m.ReceivedCount
	}
	return 0
}

func init() {
	proto.RegisterType((*Result)(nil), "Result")
}

func init() { proto.RegisterFile("pkg/grpcstreamer/streamer.proto", fileDescriptor_649f0c502c082470) }

var fileDescriptor_649f0c502c082470 = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2f, 0xc8, 0x4e, 0xd7,
	0x4f, 0x2f, 0x2a, 0x48, 0x2e, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0x4d, 0x2d, 0xd2, 0x87, 0x31, 0xf4,
	0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0xa5, 0x0c, 0x40, 0x0a, 0xf2, 0x0b, 0x52, 0xf3, 0x4a, 0x52, 0x73,
	0x52, 0x73, 0x53, 0x4b, 0x8a, 0x2a, 0xf5, 0xc1, 0x12, 0xfa, 0x20, 0x76, 0x66, 0x72, 0xb1, 0x7e,
	0x99, 0x21, 0x8c, 0x09, 0xd1, 0xa1, 0xa4, 0xc7, 0xc5, 0x16, 0x94, 0x5a, 0x5c, 0x9a, 0x53, 0x22,
	0xa4, 0xc2, 0xc5, 0x5b, 0x94, 0x9a, 0x9c, 0x9a, 0x59, 0x96, 0x9a, 0xe2, 0x9c, 0x5f, 0x9a, 0x57,
	0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x1b, 0x84, 0x2a, 0x68, 0xe4, 0xc9, 0xc5, 0x11, 0x0c, 0xb5,
	0x53, 0xc8, 0x96, 0x8b, 0x0d, 0xc2, 0x16, 0x52, 0xd3, 0x43, 0xb1, 0x14, 0x62, 0xb6, 0x1e, 0xcc,
	0xa6, 0x32, 0x43, 0x3d, 0x5f, 0x30, 0x53, 0x8a, 0x5d, 0x0f, 0x62, 0x99, 0x12, 0x83, 0x06, 0xa3,
	0x93, 0xdc, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe3,
	0xb1, 0x1c, 0x43, 0x14, 0x0f, 0xb2, 0xdf, 0x92, 0xd8, 0xc0, 0xa6, 0x18, 0x03, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x71, 0x73, 0x86, 0x82, 0xf6, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamerClient is the client API for Streamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamerClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (Streamer_StreamClient, error)
}

type streamerClient struct {
	cc *grpc.ClientConn
}

func NewStreamerClient(cc *grpc.ClientConn) StreamerClient {
	return &streamerClient{cc}
}

func (c *streamerClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Streamer_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Streamer_serviceDesc.Streams[0], "/Streamer/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamerStreamClient{stream}
	return x, nil
}

type Streamer_StreamClient interface {
	Send(*v1.Metric) error
	CloseAndRecv() (*Result, error)
	grpc.ClientStream
}

type streamerStreamClient struct {
	grpc.ClientStream
}

func (x *streamerStreamClient) Send(m *v1.Metric) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamerStreamClient) CloseAndRecv() (*Result, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamerServer is the server API for Streamer service.
type StreamerServer interface {
	Stream(Streamer_StreamServer) error
}

// UnimplementedStreamerServer can be embedded to have forward compatible implementations.
type UnimplementedStreamerServer struct {
}

func (*UnimplementedStreamerServer) Stream(srv Streamer_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}

func RegisterStreamerServer(s *grpc.Server, srv StreamerServer) {
	s.RegisterService(&_Streamer_serviceDesc, srv)
}

func _Streamer_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamerServer).Stream(&streamerStreamServer{stream})
}

type Streamer_StreamServer interface {
	SendAndClose(*Result) error
	Recv() (*v1.Metric, error)
	grpc.ServerStream
}

type streamerStreamServer struct {
	grpc.ServerStream
}

func (x *streamerStreamServer) SendAndClose(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamerStreamServer) Recv() (*v1.Metric, error) {
	m := new(v1.Metric)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Streamer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Streamer",
	HandlerType: (*StreamerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Streamer_Stream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/grpcstreamer/streamer.proto",
}

func (m *Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Result) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Result) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReceivedCount != 0 {
		i = encodeVarintStreamer(dAtA, i, uint64(m.ReceivedCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStreamer(dAtA []byte, offset int, v uint64) int {
	offset -= sovStreamer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReceivedCount != 0 {
		n += 1 + sovStreamer(uint64(m.ReceivedCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStreamer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStreamer(x uint64) (n int) {
	return sovStreamer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreamer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedCount", wireType)
			}
			m.ReceivedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceivedCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStreamer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStreamer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStreamer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStreamer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStreamer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStreamer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStreamer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStreamer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStreamer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStreamer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStreamer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStreamer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStreamer = fmt.Errorf("proto: unexpected end of group")
)
